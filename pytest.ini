[pytest]
# Test discovery and execution
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output configuration
log_cli = true
log_cli_level = DEBUG
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s | %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Console output formatting
console_output_style = count
addopts = 
    --verbose
    --capture=no
    --tb=short
    --strict-markers
    --durations=10
    --maxfail=10
    --showlocals
    --color=yes
    -p no:warnings
    --log-format="%(asctime)s %(levelname)s %(message)s"
    --log-date-format="%Y-%m-%d %H:%M:%S"

# Asyncio configuration
asyncio_mode = strict
asyncio_default_fixture_loop_scope = function

# Custom markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    system: marks tests as system tests
    api: marks tests as API tests
    logging: marks tests as logging tests
    visualization: marks tests that generate visualizations
    safe_to_fail: marks tests that should continue on failure

# Coverage configuration
[coverage:run]
source = fractiverse
omit = 
    tests/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError

[coverage:html]
directory = test_outputs/coverage 